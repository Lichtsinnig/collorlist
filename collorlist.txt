##############################################################
# Core
##############################################################
function GetType {
                      param($obj)
                        switch -regex ($obj){
                                            '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$' {$result="ip"}
                                            '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$' {$result="range"}
                                            '^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$' {$result="url"}
                                            default {$result="error"}
                                             }
                        $result
                      }

function ConvertTo-IPv4MaskString {
                                    param(
                                          [parameter(Mandatory=$true)]
                                          [ValidateRange(0,32)]
                                          [Int] $MaskBits
                                         )
                                        $mask = ([Math]::Pow(2, $MaskBits) - 1) * [Math]::Pow(2, (32 - $MaskBits))
                                        $bytes = [BitConverter]::GetBytes([UInt32] $mask)
                                        (($bytes.Count - 1)..0 | ForEach-Object { [String] $bytes[$_] }) -join "."
                                  }
#IPv4MaskString -MaskBits 24

function Compare-Subnets {
                         param (
                                $Sip,$Smask=$null,$Rip,$Rmask
                                )
                                $Rmask = ConvertTo-IPv4MaskString -MaskBits $Rmask
                                if($Smask -ne $null){
                                $Smask = ConvertTo-IPv4MaskString -MaskBits $Smask
                                if (
                                    (([Net.IPAddress]$Sip).Address -band ([Net.IPAddress]$Smask).address) -eq (([Net.IPAddress]$Rip).Address -band ([Net.IPAddress]$Smask).address) -or (([Net.IPAddress]$Sip).Address -band ([Net.IPAddress]$Rmask).address) -eq (([Net.IPAddress]$Rip).Address -band ([Net.IPAddress]$Rmask).address) 
                                    
                                    ){$result = $true}
                                    else {$result = $false}


                                }
                                else{if((([Net.IPAddress]$Sip).Address -band ([Net.IPAddress]$Rmask).address) -eq (([Net.IPAddress]$Rip).Address -band ([Net.IPAddress]$Rmask).address)){$result = $true}
                                    else {$result = $false}
                                }

return $result
                                
}

function NewDataCheck{
                      param(
                      $obj, # ip\subnet\url
                      $wl_path)

                      #NewDataCheck -obj "10.1.1.2","192.168.1.1/24" -wl_path C:\db\wl\net_db.json.txt

                      $DataMerge=@()
                      $wl_obj= Get-Content -Path $wl_path | ConvertFrom-Json
                      
                      $ObjWithDataType = @()
                      foreach ($iobj in $obj){
                                             # check data type
                                             $TMP_ObjWithDataType = New-Object -TypeName psobject 
                                             $TMP_ObjWithDataType | Add-Member -MemberType NoteProperty -Name obj -Value $iobj
                                             $TMP_ObjWithDataType | Add-Member -MemberType NoteProperty -Name type -Value (GetType -obj $iobj)
                                             $ObjWithDataType+=$TMP_ObjWithDataType
                                             }
                      
                      $tmpDataMerge = Join-Object -Left $ObjWithDataType -Right $WL_obj -LeftJoinProperty 'obj' -RightJoinProperty 'obj' -prefix 'R_' -Type AllInLeft|?{$_.R_type -eq $null}| select obj,type
                      $DataMerge+=$tmpDataMerge| ?{$_.type -eq "url"}
                      $intersect =@()
                      foreach($datacheck in ($tmpDataMerge | ?{$_.type -in ("ip","range")})){
                                                                                                 foreach ($iwl in ($wl_obj| ?{$_.type -eq "range"})){$WLIPSubnet = $iwl.obj -split "/"
                                                                                                 $WLIPSubnet
                                                                                                                                                         if($datacheck.type -eq "ip"){
                                                                                                                                                                                          if((Compare-Subnets -Sip $datacheck.obj -Rip $WLIPSubnet[0] -Rmask $WLIPSubnet[1]) -eq $true){$intersect+=$datacheck.obj; break}
                                                                                                                                                                                          }
                                                                                                                                                         else{$DatacheckIPSubnet = $datacheck.obj -split "/"
                                                                                                                                                              if((Compare-Subnets -Sip $DatacheckIPSubnet[0] -Smask $DatacheckIPSubnet[1] -Rip $WLIPSubnet[0] -Rmask $WLIPSubnet[1]) -eq $true){$intersect+=$datacheck.obj; break}
                                                                                                                                                              }
                                                                                                                                                         
                                                                                                                                                         
                                                                                                                                                         }
                                                                                                 
                                                                                                 }
                      $DataMerge+=$tmpDataMerge| ?{$_.type -in ("ip","range")} | ?{$_.obj -notin $intersect}

                      return $DataMerge

}

#NewDataCheck -obj "10.1.1.2","192.168.1.1/24" -wl_path C:\db\wl\net_db.json.txt

function MergeData {
                    param($obj, $db_path)
                    
                    $db=get-content -path $db_path | ConvertFrom-Json
                    $MergeObj = @()
                    $obj | % { $TMPMergeObj = New-Object -TypeName psobject; $TMPMergeObj  | Add-Member -MemberType NoteProperty -Name obj -Value $_;$MergeObj +=$TMPMergeObj}

                    $MergedData = New-Object -TypeName psobject
                    $MergedData | Add-Member -MemberType NoteProperty -Name NewData -Value (Join-Object -Left $MergeObj -Right $db -LeftJoinProperty 'obj' -RightJoinProperty 'obj' -prefix 'R_' -Type AllInLeft |?{$_.R_type -eq $null} | select obj)
                    $MergedData | Add-Member -MemberType NoteProperty -Name DelData -Value (Join-Object -Left $db -Right $obj1 -LeftJoinProperty 'obj' -RightJoinProperty 'obj' -prefix 'R_' -Type AllInLeft|?{$_.R_type -eq $null} |select obj)
                    return $MergedData
                    }
#MergeDataList -obj "10.1.1.2","192.168.1.1/24" -db_path "C:\db\Fincert\net_db1.json.txt" | fl *
function AddData2BL{
                    param($db_path, $obj, $type, $ttl,$add_user, $add_comment)
                    
                    $addObj = New-Object -TypeName psobject
                    $addObj| Add-Member -MemberType NoteProperty -Name Obj -Value $obj
                    $addObj| Add-Member -MemberType NoteProperty -Name type -Value $type
                    $addObj| Add-Member -MemberType NoteProperty -Name ttl -Value $ttl
                    $addObj| Add-Member -MemberType NoteProperty -Name add_dt -Value (get-date -Format "dd-MM-yyyy HH:mm")
                    $addObj| Add-Member -MemberType NoteProperty -Name add_user -Value $add_user
                    $addObj| Add-Member -MemberType NoteProperty -Name add_comment -Value $add_comment
                    $addObj|ConvertTo-Json -Compress |Out-File -Append -FilePath $db_path -Encoding utf8
                    
                    }
#AddData2BL -obj "127.0.0.1" -type "ip" -ttl "8" -add_user "test" -add_comment "bfkhjqbdfjqnfjqf" -db_path C:\db\Fincert\net_db.json.txt

function AddData2WL{
                    param($db_path, $obj, $type, $ListType,$ttl,$add_user, $add_comment)
                    #ListType WL\FP
                    
                    $addObj = New-Object -TypeName psobject
                    $addObj| Add-Member -MemberType NoteProperty -Name Obj -Value $obj
                    $addObj| Add-Member -MemberType NoteProperty -Name type -Value $type
                    $addObj| Add-Member -MemberType NoteProperty -Name ListType -Value $ListType
                    $addObj| Add-Member -MemberType NoteProperty -Name ttl -Value $ttl
                    $addObj| Add-Member -MemberType NoteProperty -Name add_dt -Value (get-date -Format "dd-MM-yyyy HH:mm")
                    $addObj| Add-Member -MemberType NoteProperty -Name add_user -Value $add_user
                    $addObj| Add-Member -MemberType NoteProperty -Name add_comment -Value $add_comment
                    $addObj|ConvertTo-Json -Compress |Out-File -Append -FilePath $db_path -Encoding utf8
                    
                    }
#AddData2Wl -obj "127.0.0.1" -type "ip" -ttl "8" -add_user "test" -add_comment "bfkhjqbdfjqnfjqf" -db_path C:\db\Fincert\net_db.json.txt

function DelDataDB {param ($BLPath,$BLPathHist,$obj,$user,$comment)
                     $BL_obj=Get-Content -Path $BLPath | ConvertFrom-Json
                     $hist_obj=@()
                     $BL_obj | ?{$_.obj -in ($obj)} |% {
                                                        $TmpObjHistData = New-Object -TypeName psobject
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name Obj -Value $_.obj
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name type -Value $_.type
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name ttl -Value $_.ttl
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name add_dt -Value $_.add_dt
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name add_user -Value $_.add_user
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name add_comment -Value $_.add_comment
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name del_dt -Value  (get-date -Format "dd-MM-yyyy HH:mm")
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name del_user -Value $user
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name Del_comment -Value $comment
                                                        $hist_obj += $TmpObjHistData |ConvertTo-Json -Compress
                                                        }
                    $hist_obj|Out-File -FilePath $BLPathHist -Encoding utf8  -Append
                    $BL_obj | ?{$_.obj -notin ($obj)} |%{$_| ConvertTo-Json -Compress}|Out-File -FilePath $BLPath -Encoding utf8  -Force
                   }

#DelDataDB -BLPath "C:\db\Fincert\net_db1.json.txt" -obj "0aqpqdju.me" -user udalyator -comment test -BLPathHist C:\db\Fincert\history.json.txt

function DelDataWL {param ($WLPath,$WLPathHist,$obj,$user,$comment)
                     $WL_obj=Get-Content -Path $WLPath | ConvertFrom-Json
                     $hist_obj=@()
                     $WL_obj | ?{$_.obj -in ($obj)} |% {
                                                        $TmpObjHistData = New-Object -TypeName psobject
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name Obj -Value $_.obj
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name type -Value $_.type
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name ListType -Value $_.ListType
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name ttl -Value $_.ttl
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name add_dt -Value $_.add_dt
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name add_user -Value $_.add_user
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name add_comment -Value $_.add_comment
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name del_dt -Value  (get-date -Format "dd-MM-yyyy HH:mm")
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name del_user -Value $user
                                                        $TmpObjHistData | Add-Member -MemberType NoteProperty -Name Del_comment -Value $comment
                                                        $hist_obj += $TmpObjHistData |ConvertTo-Json -Compress
                                                        }
                    $hist_obj|Out-File -FilePath $WLPathHist -Encoding utf8  -Append
                    $WL_obj | ?{$_.obj -notin ($obj)} |%{$_| ConvertTo-Json -Compress}|Out-File -FilePath $WLPath -Encoding utf8  -Force
                    }

function UpdStat {param ($path_db, $list)
                  $st_path= ("{0}\conf\stat.json") -f $path_db
                  $stat=Get-Content -Path $st_path|ConvertFrom-Json
                  
                  $db_path = ("{0}\list\{1}\db.json") -f $path_db, $list
                  $hist_path = ("{0}\list\{1}\hist.json") -f $path_db, $list
                  $db = Get-Content -Path $db_path
                  $hist = Get-Content -Path $hist_path
                  $maxdt= @()
                  $maxdt +=$db[-1]|ConvertFrom-Json|%{$_.add_dt}
                  $maxdt +=$hist[-1]|ConvertFrom-Json|%{$_.del_dt}
                  #($maxdt| Sort-Object)[-1]
                  ($stat | ?{$_.listname -eq $list} ) | %{
                                                          $_.count= $db.Length;
                                                          $_.hist_count = $hist.Length;
                                                          $_.LastUpdate = ($maxdt| Sort-Object)[-1]
                                                          }
                  $stat
                  
                  

                  }

#UpdStat -path_db "C:\db\" -list "Fincert"

function NewBL {param ($path_db,$name)
                $stat_path=  "{0}\conf\stat.json" -f $path_db
                $stat= Get-Content
                $db_path = "{0}\list\{1}" -f $path_db,$name
                New-Item -Path $db_path -ItemType directory
                New-Item -Path $db_path -Name db.json -ItemType file
                New-Item -Path $db_path -Name hist.json -ItemType file

                
               }

function BLPublic {
                   }



#################################################################
# API
#################################################################

##########
# Admin
##########
function CreateBL{}
function DelBL{}
#########
# Stat
#########
function GetStat{}
###########
# Check
###########
function CheckObjInBL{}
function CheckObjInWL{}
###########
# get data
###########
function GetDataFromBL{}
function GetDataFromWL{}
###########
# add OBJ
###########
function AddObj2BL{}
function AddObj2WL{}
###########
# Del OBJ
###########
function DelObjFromBL{}
function DelObjFromWL{}
